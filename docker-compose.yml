services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "bash", "-c", "nc -z localhost 9092"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka-init:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic video.uploaded.event;
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic video.upload.failed.event;
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic video.cataloged.event;
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic video.process.result;
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic video.cataloged.event;
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic video.notification.event;
      "

  users-db:
    image: postgres:16
    container_name: users-db
    environment:
      POSTGRES_DB: users_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgreuser
    ports:
      - "5432:5432"

  catalog-db:
    image: postgres:16
    container_name: catalog-db
    environment:
      POSTGRES_DB: catalog_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgreuser
    ports:
      - "5433:5432"

  api-gateway:
    build:
      context: .
      dockerfile: backend/api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"

  user-service:
    build:
      context: .
      dockerfile: backend/user-service/Dockerfile
    container_name: user-service
    depends_on:
      - users-db
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://users-db:5432/users_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgreuser
    volumes:
      - ./uploads:/app/uploads

  catalog-service:
    build:
      context: .
      dockerfile: backend/catalog-service/Dockerfile
    container_name: catalog-service
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      catalog-db:
        condition: service_started
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://catalog-db:5432/catalog_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgreuser
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    volumes:
      - ./uploads:/app/uploads

  uploader-service:
    build:
      context: .
      dockerfile: backend/uploader-service/Dockerfile
    container_name: uploader-service
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    ports:
      - "8083:8083"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    volumes:
      - ./uploads:/app/uploads

  processor-service:
    build:
      context: .
      dockerfile: backend/processor-service/Dockerfile
    container_name: processor-service
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    ports:
      - "8084:8084"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    volumes:
      - ./uploads:/app/uploads

  stream-service:
    build:
      context: .
      dockerfile: backend/stream-service/Dockerfile
    container_name: stream-service
    ports:
      - "8085:8085"
    volumes:
      - ./uploads:/app/uploads

  notification-service:
    build:
      context: .
      dockerfile: backend/notification-service/Dockerfile
    container_name: notification-service
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    ports:
      - "8086:8086"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  frontend:
    build:
      context: ./frontend/video-platform-frontend
      dockerfile: Dockerfile
    container_name: frontend
    depends_on:
      - user-service
      - catalog-service
      - uploader-service
      - processor-service
      - stream-service
      - notification-service
    ports:
      - "4200:80"